#!/usr/bin/env python3
"""
Demo Runner for Function Registry Pattern

Ensures correct imports in a Poetry environment and runs the feedback_health_demo.
"""

import os
import sys
import importlib.util

# Make sure project root is in path for imports to work in Poetry
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '../..'))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

# Now we can safely import our demo module
from src.registry.feedback_health_demo import run_feedback_health_demo

# Create necessary directories
os.makedirs("demo_output", exist_ok=True)
os.makedirs("demo_output/feedback_demo", exist_ok=True)

# Create empty __init__.py files where needed to ensure imports work correctly
for directory in ['src', 'src/registry']:
    init_file = os.path.join(project_root, directory, '__init__.py')
    if not os.path.exists(init_file):
        with open(init_file, 'w') as f:
            f.write('# Generated by demo runner\n')

# Define fallback modules that might be imported but not available
def create_fallback_module(module_name):
    if module_name not in sys.modules:
        spec = importlib.util.spec_from_loader(module_name, loader=None)
        if spec is not None:  # Check that spec is not None before using it
            module = importlib.util.module_from_spec(spec)
            sys.modules[module_name] = module
        else:
            # Create an empty module as fallback if spec is None
            import types
            module = types.ModuleType(module_name)
            sys.modules[module_name] = module

# Create fallbacks for modules that might be imported but don't exist
for module_name in [
    'src.registry.parameter_handling',
    'src.registry.registry_tools',
    'src.registry.function_bundles',
    'src.registry.performance_optimization'
]:
    create_fallback_module(module_name)

if __name__ == "__main__":
    # Run the demo
    import asyncio
    asyncio.run(run_feedback_health_demo()) 